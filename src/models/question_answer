export interface iCreateQuestion {
  id_question: number;
  answer: string;
  status: boolean;
}
export const createQuestion = async (
  newData: iCreateQuestion,
): Promise<boolean> => {
  var myHeaders = new Headers();
  myHeaders.append(
    'Authorization',
    'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJpemFsYWRtaW5yZW1lZGlhbCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY0MDY5MDYyOCwiZXhwIjoxNjQwNzA4NjI4fQ.iMldDvR_hw7oqn8uqgs7FNyyJFyO1bECzsgOth-6bb8',
  );
  myHeaders.append('Content-Type', 'application/json');

  var raw = JSON.stringify({
    id_question: newData.id_question,
    answer: newData.answer,
    status: newData.status,
  });

  var requestOptions = {
    method: 'POST',
    headers: myHeaders,
    body: raw,
  };

  const data = await fetch(
    'http://localhost:8080/question_answers',
    requestOptions,
  )
    .then((response) => response.json())
    .then((result) => {
      return result;
    })
    .catch((error) => {
      return error;
    });
  if ((await data) === true) {
    return data;
  } else {
    return false;
  }
};

export interface QuestionsData {
  id: number;
  id_indicator: number;
  question: string;
  media: string;
}
export const getQuestion = async (
  id_question: number,
): Promise<QuestionsData[]> => {
  var myHeaders = new Headers();
  myHeaders.append(
    'Authorization',
    'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJpemFsYWRtaW5yZW1lZGlhbCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY0MDY5MDYyOCwiZXhwIjoxNjQwNzA4NjI4fQ.iMldDvR_hw7oqn8uqgs7FNyyJFyO1bECzsgOth-6bb8',
  );
  myHeaders.append('Content-Type', 'application/json');

  var raw = JSON.stringify({
    id_question: id_question,
  });

  var requestOptions = {
    method: 'GET',
    headers: myHeaders,
    body: raw,
  };

  const data = await fetch(
    'http://localhost:8080/question_answers_by_id_question',
    requestOptions,
  )
    .then((response) => response.json())
    .then((result) => {
      return result;
    })
    .catch((error) => {
      return error;
    });
  return await data.result;
};

export const deleteQuestionAnswerId = async (id: number): Promise<boolean> => {
  var myHeaders = new Headers();
  myHeaders.append(
    'Authorization',
    'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJpemFsYWRtaW5yZW1lZGlhbCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY0MDY5MDYyOCwiZXhwIjoxNjQwNzA4NjI4fQ.iMldDvR_hw7oqn8uqgs7FNyyJFyO1bECzsgOth-6bb8',
  );
  myHeaders.append('Content-Type', 'application/json');

  var raw = JSON.stringify({
    id: id,
  });

  var requestOptions = {
    method: 'DELETE',
    headers: myHeaders,
    body: raw,
  };

  const data = await fetch(
    'http://localhost:8080/question_answers',
    requestOptions,
  )
    .then((response) => response.json())
    .then((result) => {
      return result;
    })
    .catch((error) => {
      return error;
    });
  return await data;
};

export const updateQuestion = async (
  id: number,
  id_indicator: number,
  question: string,
  media: string,
): Promise<boolean> => {
  var myHeaders = new Headers();
  myHeaders.append(
    'Authorization',
    'Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VybmFtZSI6InJpemFsYWRtaW5yZW1lZGlhbCIsInJvbGUiOiJhZG1pbiIsImlhdCI6MTY0MDY5MDYyOCwiZXhwIjoxNjQwNzA4NjI4fQ.iMldDvR_hw7oqn8uqgs7FNyyJFyO1bECzsgOth-6bb8',
  );
  myHeaders.append('Content-Type', 'application/json');

  var raw = JSON.stringify({
    id: id,
    id_indicator: id_indicator,
    question: question,
    media: media,
  });

  var requestOptions = {
    method: 'PUT',
    headers: myHeaders,
    body: raw,
  };

  const data = await fetch('http://localhost:8080/question', requestOptions)
    .then((response) => response.json())
    .then((result) => {
      return result;
    })
    .catch((error) => {
      return error;
    });

  return await data;
};
